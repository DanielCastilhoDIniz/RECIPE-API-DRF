name: CI/CD Pipeline

on:
  pull_request:
    branches:
      - develop
      - main
      - 'feature/**'
    types: [opened, synchronize, reopened]

jobs:
  validate:
    name: Validate Feature
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: ${{ vars.TEST_DB_NAME }}
          POSTGRES_USER: ${{ vars.TEST_DB_USER }}
          POSTGRES_PASSWORD: ${{ secrets.TEST_DB_PASSWORD }}
        ports:
          - 5432:5432
        options: --health-cmd "pg_isready -U ${{ vars.TEST_DB_USER }}" --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
      - name: Checkout do código
        uses: actions/checkout@v4

      - name: Configurar Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Image
        uses: docker/build-push-action@v5
        with:
          context: .
          tags: temp-image:pr-${{ github.event.pull_request.number }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          load: true
          build-args: |
            DEV=true

      - name: Criar arquivo .env dinamicamente
        run: |
          mkdir -p dotenv_files
          cat <<EOF > dotenv_files/.env
          SECRET_KEY=${{ secrets.SECRET_KEY }}
          DEBUG=${{ vars.DEBUG }}
          ALLOWED_HOSTS=${{ vars.ALLOWED_HOSTS }}
          DB_ENGINE=${{ vars.DB_ENGINE }}
          POSTGRES_DB=${{ vars.POSTGRES_DB }}
          POSTGRES_USER=${{ vars.POSTGRES_USER }}
          POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_HOST=${{ vars.POSTGRES_HOST }}
          POSTGRES_PORT=${{ vars.POSTGRES_PORT }}
          EOF

      - name: Subir Docker Compose
        run: docker compose -f docker-compose.ci.yml up -d
        env:
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
          DEBUG: ${{ vars.DEBUG }}
          ALLOWED_HOSTS: ${{ vars.ALLOWED_HOSTS }}
          DB_ENGINE: ${{ vars.DB_ENGINE }}
          POSTGRES_DB: ${{ vars.POSTGRES_DB }}
          POSTGRES_USER: ${{ vars.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_HOST: ${{ vars.POSTGRES_HOST }}
          POSTGRES_PORT: ${{ vars.POSTGRES_PORT }}

      - name: Aguardar Banco de Dados
        run: |
          docker compose run --rm app sh -c "python manage.py wait_for_db"
        env:
          POSTGRES_DB: ${{ vars.POSTGRES_DB }}
          POSTGRES_USER: ${{ vars.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}

      - name: Rodar Migrações
        run: docker compose -f docker-compose.ci.yml exec app python manage.py migrate

      - name: Verificar Status dos Contêineres
        run: docker compose -f docker-compose.ci.yml ps

      - name: Rodar Testes
        run: docker compose -f docker-compose.ci.yml run --rm app python manage.py test

      - name: Lint Code
        run: |
          docker run --rm \
            temp-image:pr-${{ github.event.pull_request.number }} \
            sh -c "flake8 --check --exclude migrations ."

      - name: Derrubar os containers
        run: docker compose -f docker-compose.ci.yml down